# Maintainer: Ink Is A Verb <codes@inkisaverb.com>
pkgname=501webapp
pkgver=1  # Must not be empty (can be anything), later replaced with the pkgver() function, getting the version from git so this does not need to be re-written on every release
pkgrel=1
pkgdesc="The VIP Code 501 CMS web app-as-package"
url="https://github.com/inkVerb/501webapp"
arch=('any')
license=('GPL')
depends=('bash' 'apache' 'php' 'mariadb' 'libxml2' 'xmlstarlet' 'imagemagick' 'ffmpeg' 'lame' 'pandoc' 'texlive-core' 'texlive-latex' 'texlive-fontsrecommended' 'texlive-latexrecommended')  # Apache becuase we use rewrites
makedepends=('git')
source=("git+https://github.com/inkVerb/501.git")
#source=('git+https://github.com/inkVerb/501.git')
  # Git will clone to 501webapp/arch/501 (native repo name, unchanged)
#source=("$pkgname::git+https://github.com/inkVerb/501.git") # Same as source=("501webapp::git+https://github.com/inkVerb/501.git")
  # Git will clone to 501webapp/arch/$pkgname = 501webapp/arch/src/501webapp (new repo name, changed to $pkgname = 501webapp)
# Using pkgname=501webapp, regardless of source=, the Git repo will move to arch/pkg/$pkgname
  # $srcdir # Git packaged moves into this: 501webapp/arch/src/
  # $pkgdir # Same as 501webapp/arch/pkg/501webapp # Where the installed package will go for prep to install to the system

sha256sums=('SKIP')
install='structure.install'
# Preserve when uninstalled, delete when purged
backup=("etc/${pkgname}/in.conf.php" "etc/${pkgname}/blog_db.sql")

# Dynamically set pkgver= variable based on unique source versioning
# Can go anywhere in PKGBUILD file, but usually variables are first, then functions after

pkgver() {
  # PWD is 501webapp/arch/
  # Git will clone repo "501" here
  cd $srcdir # Same as 501webapp/arch/src/
    ( set -o pipefail
      git describe --long --tags --abbrev=7 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
      git describe --long --abbrev=7 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
      printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short=7 HEAD)"
  )
}

build() {
  cd "$srcdir" # Same as 501webapp/arch/src/
  # Normally we could do something here, but this is only an example
}

package() {
  # Figure out the web user
  webuser=$(ps aux | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d\  -f1)
  if [ -d "/srv/www" ]; then
    webdir="srv/www"
  elif [ -d "/var/www" ]; then
    webdir="var/www"
  else
    echo "No web folder found."
    exit 1
  fi

  # Move files in place
  #cd "${srcdir}/501" # We NO LONGER here from the build() function, must cd here again
  install -d "${pkgdir}/${webdir}"
  cp -r "${srcdir}/501/cms" "${pkgdir}/${webdir}/501" # Using the final name 501 of where the webapp should reside

  # Protect the config file
  install -d "${pkgdir}/etc/${pkgname}"
  mv "${pkgdir}/${webdir}/501/in.conf.php" "${pkgdir}/etc/${pkgname}/"
  ln -s "/etc/${pkgname}/in.conf.php" "${pkgdir}/${webdir}/501/in.conf.php"

  # Web directory structure
  cd "${pkgdir}/${webdir}/501"
  mv htaccess .htaccess
  mkdir -p media/docs media/audio media/video media/images media/uploads media/original/images media/original/video media/original/audio media/original/docs media/pro

  # Own web directory
  chown -R $webuser:$webuser "${pkgdir}/${webdir}/501"
}